type Query {
  findAllTeams: [Team]!
}

type Query {
  findTeam(name: String!): Team
}

input CreateTeamInput {
  name: String!
  manager_id: String!
  nextYearBudget: Int!
  rookiesDraftDetails: [RookiesDraftDetails]
  currentRoster: [PlayerInput!]!
  prevRosters: [[PlayerInput!]]!
  draftRecord: [DraftRecordInput!]!
}

input PlayerInput {
  player: String!
  purchasePrice: Int!
  keeperStatus: Int!
  YOS: Int!
  contractLength: Int!
}

input ChosenKeepersInput {
  manager_id: String!
  nextYearBudget: Int!
  currentRoster: [PlayerInput!]!
}

type Mutation {
  updateChosenKeepers(input: ChosenKeepersInput!): UpdateChosenKeepersResponse!
  addNewTeam(team: CreateTeamInput!): Team
}

type UpdateChosenKeepersResponse {
  nextYearBudget: Int!
  currentRoster: [Player!]!
}

input DraftRecordInput {
  season: Int!
  draftPosition: Int!
  playerDrafted: String!
}

type Player {
  player: String!
  purchasePrice: Float!
  keeperStatus: Float!
  nextSeasonSalary: Float!
  contractLength: Float!
  YOS: Float!
}

type Team {
  _id: ID!
  name: String!
  manager_id: String!
  nextYearBudget: Float!
  finalRank: Int!
  rookiesDraftDetails: RookiesDraftDetails!
  currentRoster: [Player!]!
  prevRosters: [[Player!]!]!
  draftRecord: [DraftEntry!]!
}

type DraftEntry {
  season: Float!
  draftPosition: Float!
  playerDrafted: String!
}

type RookiesDraftDetails {
  incomingPick: String!
  outgoingPick: String!
  swapRightsWith: String!
  draftPosition: Int!
}