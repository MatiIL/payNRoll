type Query {
  findAllTeams: [Team]
}

type Query {
  findTeam(name: String!): Team
}

input CreateTeamInput {
  name: String!
  manager_id: String!
  nextYearBudget: Int!
  rookiesDraftDetails: [RookiesDraftDetails]
  currentRoster: [PlayerInput!]
  prevRosters: [[PlayerInput!]]
  draftRecord: [DraftRecordInput!]
}

input PlayerInput {
  player: String!
  purchasePrice: Int!
  keeperStatus: Int!
  YOS: Int!
  nextSeasonSalary: String
  contractLength: String
}

input DraftRecordInput {
  season: Int!
  draftPosition: Int!
  playerDrafted: String!
}

type Mutation {
  updateTeamProperty(
    name: String!
    property: String!
    value: UpdateTeamInput!
  ): Team
}

input UpdateTeamInput {
  _id: String
  name: String
  nextYearBudget: Int
  incomingPick: String!
  outgoingPick: String!
  swapRightsWith: String!
  draftPosition: Int!
  currentRoster: [PlayerInput]
  prevRosters: [[PlayerInput]]
  draftRecord: [DraftRecordInput]
}

type Mutation {
  addNewTeam(team: CreateTeamInput!): Team
}

type Team {
  _id: ID!
  name: String!
  manager_id: String!
  nextYearBudget: Float!
  finalRank: Float!
  rookiesDraftDetails: RookiesDraftDetails!
  currentRoster: [Player]
  prevRosters: [[Player]]
  draftRecord: [DraftEntry]
}

type Player {
  player: String!
  purchasePrice: Float!
  keeperStatus: Float!
  YOS: Float!
  nextSeasonSalary: String
  contractLength: String
}

type DraftEntry {
  season: Float!
  draftPosition: Float!
  playerDrafted: String!
}

type RookiesDraftDetails {
  incomingPick: String!
  outgoingPick: String!
  swapRightsWith: String!
  draftPosition: Int!
}
